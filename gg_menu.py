# GGmenu class is tk.Menu, with convenient method to add buttons

import tkinter as tk

from gg_tkutils import isMac, keyBind, focusGet


class GGmenu(tk.Menu):
    def __init__(self, parent, label, **kwargs):
        super().__init__(parent, **kwargs)
        command_args = {"menu": self}
        if label:
            (label_tilde, label_txt) = processLabel(label)
            command_args["label"] = (label_txt,)
            if label_tilde >= 0:
                command_args["underline"] = label_tilde
        # Only needs cascade if a child of menu/menubar, not if a context popup menu
        if isinstance(parent, tk.Menu):
            parent.add_cascade(command_args)

    #
    # Add a button to the menu
    #
    # label can contain tilde, e.g. "~Save", to underline S
    # handler can be a function or a built-in virtual event,
    #   e.g. "<<Cut>>", in which case button will generate that event,
    #   but there's no need for key binding, since built-in
    # optional accel is accelerator that will be shown in menu:
    #   "Cmd/Ctrl" means Command key on Mac, else Control key
    #   Key binding string is automatically created from accelerator string
    #   and key is bound to do the same as the menu button
    def addButton(self, label, handler, accel=""):
        (label_tilde, label_txt) = processLabel(label)
        (accel, key_event) = processAccel(accel)
        if type(handler) == str:
            # Handler is built-in virtual event, so no key binding needed,
            # but event needs to be generated by button click
            command = lambda *args: focusGet().event_generate(handler)
        else:
            # Handler is function, so may need key binding
            command = handler
            if accel:
                keyBind(key_event, command)

        command_args = {
            "label": label_txt,
            "command": command,
            "accelerator": accel,
        }
        if label_tilde >= 0:
            command_args["underline"] = label_tilde
        self.add_command(command_args)

    #
    # Add cut/copy/paste buttons to given menu
    def addCutCopyPaste(self):
        self.addButton("Cu~t", "<<Cut>>", "Cmd/Ctrl+X")
        self.addButton("~Copy", "<<Copy>>", "Cmd/Ctrl+C")
        self.addButton("~Paste", "<<Paste>>", "Cmd/Ctrl+V")


#
# Given a button label string, e.g. "~Save...", where the optional
# tilde indicates the underline location for keyboard activation,
# return the tilde location (-1 if none), and the string without the tilde
def processLabel(label):
    return (label.find("~"), label.replace("~", ""))


#
# Convert accelerator string, e.g. "Ctrl+X" to appropriate string
# for platform, e.g. "Control-X"
# Support "Cmd/Ctrl+X" to mean use Cmd key on Macs, else Ctrl key
def processAccel(accel):
    if isMac():
        accel = accel.replace("/Ctrl", "")
    else:
        accel = accel.replace("Cmd/", "")
    keyevent = accel.replace("Ctrl+", "Control-")
    keyevent = keyevent.replace("Shift+", "Shift-")
    keyevent = keyevent.replace("Cmd+", "Meta-")
    return (accel, f"<{keyevent}>")
